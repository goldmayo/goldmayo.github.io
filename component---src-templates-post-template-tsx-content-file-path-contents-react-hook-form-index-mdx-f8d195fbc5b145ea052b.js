"use strict";(self.webpackChunkmy_tech_blog=self.webpackChunkmy_tech_blog||[]).push([[70],{8821:function(n,s,a){a.r(s),a.d(s,{default:function(){return r}});var t=a(1151),p=a(7294);function o(n){const s=Object.assign({h1:"h1",span:"span",h2:"h2",a:"a",ul:"ul",li:"li",p:"p",h4:"h4"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.h1,null,"비제어 컴포넌트를 위한 React Hook Form 조사 (사용법 등) 및 간단하게 활용해보기"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">  <span class="token function">npm</span> <span class="token function">install</span> react-hook-form</code></pre></div>'}}),"\n",p.createElement(s.h2,null,p.createElement(s.a,{href:"https://www.react-hook-form.com/api/useform/"},"useForm props")),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"mode: onChange | onBlur | onSubmit | onTouched | all\nsubmit 전 검증 전략. handleSubmit 핸들러로 트리거된 onSubmit이벤트 동안 form값을 검증\n(focus 이벤트는 요소가 포커스를 받을 때, blur 이벤트는 포커스를 잃을 때 발생)"),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"reValidateMode: onChange | onBlur | onSubmit\nsubmit 후 검증 전략."),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"defaultValues: FieldValues | Promise<FieldValues>\nform의 기본 값"),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"values: FieldValues\nform에 업데이트된 값, 외부 state 또는 서버 데이터로 form을 업데이트해야 할 때 유용"),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"resetOptions: KeepStateOptions\nform 값을 업데이트하는 동안 form 상태를 리셋하고 업데이트 하기 위한 옵션"),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"criteriaMode: firstError | all\n모든 유효성 검사 오류를 표시하거나 한 번에 하나씩 표시하는 옵션"),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"shouldFocusError: boolean = true\n내장된 포커스 관리 활성 옵션, 사용자가 유효성 검사에 실패한 양식을 제출하면 오류가 있는 첫 번째 필드에 포커스."),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"delayError: number\n오류가 즉시 나타나는 것을 지연하는 옵션 ms 단위로 지정하고 사용자가 입력 오류를 정정하면 오류는 딜레이없이 즉시 사라짐"),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"shouldUseNativeValidation\n브라우저 내장 양식 제약 API를 사용하는 옵션"),"\n"),"\n",p.createElement(s.li,null,"\n",p.createElement(s.p,null,"shouldUnregister: boolean = false\nunmount 후 input의 unregister 활성 옵션"),"\n"),"\n"),"\n",p.createElement(s.h4,null,p.createElement(s.a,{href:"https://www.react-hook-form.com/api/useform/register/"},"register")),"\n",p.createElement(s.p,null,"register: (name: string, RegisterOptions?) => ({ onChange, onBlur, name, ref })"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> onChange<span class="token punctuation">,</span> onBlur<span class="token punctuation">,</span> name<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token string">\'firstName\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// include type check against field path with the name you have supplied.</span>\n\n<span class="token operator">&lt;</span>input\n  onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span> <span class="token comment">// assign onChange event</span>\n  onBlur<span class="token operator">=</span><span class="token punctuation">{</span>onBlur<span class="token punctuation">}</span> <span class="token comment">// assign onBlur event</span>\n  name<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token comment">// assign name prop</span>\n  ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token comment">// assign ref prop</span>\n<span class="token operator">/</span><span class="token operator">></span>\n<span class="token comment">// same as above</span>\n<span class="token operator">&lt;</span>input <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">\'firstName\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"register options"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"required: string | { value: boolean, message: string} 입력 필수 지정 옵션"),"\n",p.createElement(s.li,null,"maxLength: { value: number, message: string } 최대 길이 지정 옵션"),"\n",p.createElement(s.li,null,"minLength: { value: number, message: string } 최소 길이 지정 옵션"),"\n",p.createElement(s.li,null,"maxLength: { value: number, message: string } 입력 최댓값 지정 옵션"),"\n",p.createElement(s.li,null,"min: { value: number, message: string } 입력 최솟값 지정 옵션"),"\n",p.createElement(s.li,null,"pattern: { value: number, message: string } 입력에 대한 regex 지정 옵션"),"\n",p.createElement(s.li,null,"validate: { value: number, message: string } 콜백 함수를 인수로 전달하여 유효성을 검사할 수도 있고, 콜백 함수의 객체를 전달하여 모든 유효성을 검사할 수도 있다"),"\n"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-hook-form"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">LoginForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> register<span class="token punctuation">,</span> handleSubmit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">></span>이메일<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n      <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"email"</span> type<span class="token operator">=</span><span class="token string">"email"</span> placeholder<span class="token operator">=</span><span class="token string">"test@email.com"</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>비밀번호<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n      <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"password"</span> type<span class="token operator">=</span><span class="token string">"password"</span> placeholder<span class="token operator">=</span><span class="token string">"****************"</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>로그인<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Form<span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"valueAsNumber: boolean 숫자를 반환하고 문제가 생기면 NaN을 리턴"),"\n",p.createElement(s.li,null,"valueAsDate: boolean Date를 반환하고 문자가 생기면 Invalid Date를 리턴"),"\n",p.createElement(s.li,null,"setValueAs: <T>(value: any) => T 함수를 실행한 결과값을 반환합니다"),"\n",p.createElement(s.li,null,"disabled: boolean = false true일 경우 input 값은 undefined가 된다"),"\n",p.createElement(s.li,null,"deps: string | string[] dependent input에 대해 유효성 검사가 트리거되며 트리거가 아닌 register API로만 제한됩니다"),"\n"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-hook-form"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">LoginForm</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    register<span class="token punctuation">,</span>\n    handleSubmit<span class="token punctuation">,</span>\n    formState<span class="token operator">:</span> <span class="token punctuation">{</span> isSubmitting<span class="token punctuation">,</span> isSubmitted<span class="token punctuation">,</span> errors <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span>onSubmit<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">></span>이메일<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n      <span class="token operator">&lt;</span>input\n        id<span class="token operator">=</span><span class="token string">"email"</span>\n        type<span class="token operator">=</span><span class="token string">"text"</span>\n        placeholder<span class="token operator">=</span><span class="token string">"test@email.com"</span>\n        aria<span class="token operator">-</span>invalid<span class="token operator">=</span><span class="token punctuation">{</span>isSubmitted <span class="token operator">?</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span>email <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">}</span>\n        <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          required<span class="token operator">:</span> <span class="token string">"이메일은 필수 입력입니다."</span><span class="token punctuation">,</span>\n          pattern<span class="token operator">:</span> <span class="token punctuation">{</span>\n            value<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\S+@\\S+\\.\\S+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n            message<span class="token operator">:</span> <span class="token string">"이메일 형식에 맞지 않습니다."</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token punctuation">{</span>errors<span class="token punctuation">.</span>email <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>small role<span class="token operator">=</span><span class="token string">"alert"</span><span class="token operator">></span><span class="token punctuation">{</span>errors<span class="token punctuation">.</span>email<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>small<span class="token operator">></span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>비밀번호<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n      <span class="token operator">&lt;</span>input\n        id<span class="token operator">=</span><span class="token string">"password"</span>\n        type<span class="token operator">=</span><span class="token string">"password"</span>\n        placeholder<span class="token operator">=</span><span class="token string">"****************"</span>\n        aria<span class="token operator">-</span>invalid<span class="token operator">=</span><span class="token punctuation">{</span>isSubmitted <span class="token operator">?</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span>password <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">}</span>\n        <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          required<span class="token operator">:</span> <span class="token string">"비밀번호는 필수 입력입니다."</span><span class="token punctuation">,</span>\n          minLength<span class="token operator">:</span> <span class="token punctuation">{</span>\n            value<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n            message<span class="token operator">:</span> <span class="token string">"8자리 이상 비밀번호를 사용하세요."</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n      <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token punctuation">{</span>errors<span class="token punctuation">.</span>password <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>small role<span class="token operator">=</span><span class="token string">"alert"</span><span class="token operator">></span><span class="token punctuation">{</span>errors<span class="token punctuation">.</span>password<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>small<span class="token operator">></span><span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span> disabled<span class="token operator">=</span><span class="token punctuation">{</span>isSubmitting<span class="token punctuation">}</span><span class="token operator">></span>\n        로그인\n      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Form<span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"register rule"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"name은 unique 해야 한다"),"\n",p.createElement(s.li,null,"name은 특수문자 및 숫자로 시작되지 않아야 한다"),"\n",p.createElement(s.li,null,"TypeScript 사용 일관성을 위해서 도트 구문을 사용하고 있으므로 대괄호 []는 배열 형식 값에 대해 작동하지 않는다"),"\n",p.createElement(s.li,null,"name이 변경되면 새로운 input이 register된 것으로 작동하므로 정적인 name을 사용해는 것을 추천한다"),"\n",p.createElement(s.li,null,"input 값과 참조는 unmount되어도 제거되지 않으므로 unregister를 통해 제거한다"),"\n",p.createElement(s.li,null,"개별 register 옵션은 undefined와 {}로 제거되지 않는다"),"\n"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">register</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌</span>\n<span class="token function">register</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌</span>\n<span class="token function">register</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ✅</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,p.createElement(s.a,{href:"https://www.react-hook-form.com/api/useform/formstate/"},"formState")),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"isSubmmitting: 중복 제출 방지를 위해 disabled 속성에 적용하면 제출 처리가 완료될 때까지 비활성화된다."),"\n"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-hook-form"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">LoginForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    register<span class="token punctuation">,</span>\n    handleSubmit<span class="token punctuation">,</span>\n    formState<span class="token operator">:</span> <span class="token punctuation">{</span> isSubmitting <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>form\n      onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n    <span class="token operator">></span>\n      <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">></span>이메일<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n      <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"email"</span> type<span class="token operator">=</span><span class="token string">"email"</span> placeholder<span class="token operator">=</span><span class="token string">"test@email.com"</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>label htmlFor<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>비밀번호<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>\n      <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"password"</span> type<span class="token operator">=</span><span class="token string">"password"</span> placeholder<span class="token operator">=</span><span class="token string">"****************"</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span> disabled<span class="token operator">=</span><span class="token punctuation">{</span>isSubmitting<span class="token punctuation">}</span><span class="token operator">></span>\n        로그인\n      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Form<span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"testing"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> waitFor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> userEvent <span class="token keyword">from</span> <span class="token string">"@testing-library/user-event"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> LoginForm <span class="token keyword">from</span> <span class="token string">"./LoginForm"</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"validates form"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> onSubmit <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>LoginForm onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>onSubmit<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> button <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"로그인"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  userEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> alerts <span class="token operator">=</span> <span class="token keyword">await</span> screen<span class="token punctuation">.</span><span class="token function">findAllByRole</span><span class="token punctuation">(</span><span class="token string">"alert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>alerts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>onSubmit<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"submits form"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> onSubmit <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>LoginForm onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>onSubmit<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> email <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"textbox"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"이메일"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> password <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByLabelText</span><span class="token punctuation">(</span><span class="token string">"비밀번호"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> button <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"로그인"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  userEvent<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> <span class="token string">"test@email.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  userEvent<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token string">"Test1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  userEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">await</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token function">expect</span><span class="token punctuation">(</span>onSubmit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledWith</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span>\n        email<span class="token operator">:</span> <span class="token string">"test@email.com"</span><span class="token punctuation">,</span>\n        password<span class="token operator">:</span> <span class="token string">"Test1234"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      expect<span class="token punctuation">.</span><span class="token function">anything</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">queryAllByRole</span><span class="token punctuation">(</span><span class="token string">"alert"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"getValues & watch"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,"watch : 입력된 값을 추적하고 반환하며 해당 값에 따라 리렌더링을 발생시킴"),"\n",p.createElement(s.li,null,"getValues: 값을 반환하지만 리렌더링을 발생시키지 않고, 해당 값을 추적하지 않음"),"\n"),"\n",p.createElement(s.p,null,"참고한 자료 및 추천자료\n",p.createElement(s.a,{href:"https://www.react-hook-form.com/"},"https://www.react-hook-form.com/"),"\n",p.createElement(s.a,{href:"https://www.daleseo.com/react-hook-form/"},"https://www.daleseo.com/react-hook-form/"),"\n",p.createElement(s.a,{href:"https://velog.io/@yjinhann/react-hook-form-%EA%B3%BC-%EB%B9%84%EC%A0%9C%EC%96%B4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8"},"https://velog.io/@yjinhann/react-hook-form-%EA%B3%BC-%EB%B9%84%EC%A0%9C%EC%96%B4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8")))}var e=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?p.createElement(s,n,p.createElement(o,n)):o(n)},c=a(9544),l=a(3911);const u=n=>{var s;let{data:a,location:o,pageContext:e,children:u}=n;const{title:r,date:k}=null===(s=a.mdx)||void 0===s?void 0:s.frontmatter;return p.createElement(c.Z,null,p.createElement("small",null,k),p.createElement(t.Zo,{components:l.Z},u))};function r(n){return p.createElement(u,n,p.createElement(e,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-tsx-content-file-path-contents-react-hook-form-index-mdx-f8d195fbc5b145ea052b.js.map