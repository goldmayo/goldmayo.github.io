{"version":3,"file":"component---src-templates-post-template-tsx-content-file-path-contents-frontend-bundling-webpack-index-mdx-d7e3cd1efc5f564a5d37.js","mappings":"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","sources":["webpack://my-tech-blog/./contents/frontend-bundling-webpack/index.mdx","webpack://my-tech-blog/./src/templates/PostTemplate.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    strong: \"strong\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    hr: \"hr\",\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    em: \"em\",\n    a: \"a\",\n    span: \"span\",\n    h5: \"h5\",\n    ul: \"ul\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"번들러 \", React.createElement(_components.strong, null, \"Webpack 설정 옵션\"), \"을 통해 동작 원리 파악하기, 그리고 \", React.createElement(_components.strong, null, \"Webpack, SWC, Vite 차이\")), \"\\n\", React.createElement(_components.p, null, \"목차\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"등장배경 : 모듈의 탄생 배경과 문제점에 따른 번들러의 필요성\"), \"\\n\", React.createElement(_components.li, null, \"webpack 소개 및 핵심 기능\"), \"\\n\", React.createElement(_components.li, null, \"config 옵션을 통해 동작원리 파악\"), \"\\n\", React.createElement(_components.li, null, \"SWC, Vite와의 차이점\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"모듈과 번들러의 등장 배경\"), \"\\n\", React.createElement(_components.h3, null, \"모듈의 필요성\"), \"\\n\", React.createElement(_components.p, null, \"JS로 구현할 수 있는 기능이 많아질수록 늘어나는 코드와 분리한 코드간의 복잡한 의존성을 피할 수 없게 되었습니다.\"), \"\\n\", React.createElement(_components.p, null, \"단순히 여러 파일로 나누면 모듈화가 된 것이 아닙니다. JS는 모두 전역 스코프를 사용하고 이는 다른 파일에 영향을 줄 수 있습니다. 게다가 의존성에 맞게 알맞은 순서로 로드되어야 하기에 의존성을 확인하기 번거롭습니다. ESM, CommonJS AMD가 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"ESM 기준으로 export import 그리고 \", React.createElement(_components.code, null, \"<script type=\\\"module\\\" src=\\\"./module-a.js\\\">\"), \" 를 사용하여 전역 스코프 대신 독립된 모듈 스코프를 사용하여 모듈간의 의존성을 명확하게 하고 전역 스코프가 여러 변수로 오염되는 것을 막을 수 있습니다.\"), \"\\n\", React.createElement(_components.h3, null, \"번들러의 필요성\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"bundle : 묶음, 합본\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"번들러는 의존성이 있는 모듈들을 하나의 JS파일로 번들링하는 모듈 번들러입니다 모듈 시스템을 사용하면서 발생하는 문제를 해결하기 위해 필요합니다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"네트워크 요청 최소화\"), \": 모듈 시스템은 코드를 여러 개의 작은 모듈로 나누는 것을 지원합니다. 하지만 웹에서는 많은 개별 모듈을 로딩하는 데에 네트워크 요청이 필요합니다. 이로 인해 여러 개의 모듈을 로딩하는 데 시간이 많이 소요되며, 웹 페이지의 초기 로딩 속도가 저하될 수 있습니다. 번들러는 이러한 문제를 해결하기 위해 여러 모듈을 하나의 번들로 묶어서 클라이언트 측에서 하나의 요청으로 가져올 수 있게 해줍니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"종속성 관리와 충돌 방지\"), \": 프로젝트에서 사용하는 다양한 라이브러리와 모듈들 간에는 종속성 관계가 있을 수 있습니다. 이러한 종속성 관계를 관리하면서 충돌을 방지하고 최신 버전의 라이브러리를 사용하려면 번들러가 필요합니다. 번들러는 모듈 간의 종속성을 분석하고 필요한 모듈들을 올바른 순서로 포함시켜줍니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"트랜스파일링과 번역\"), \": 모듈 시스템을 사용하면 ES6+의 최신 JavaScript 기능을 활용할 수 있습니다. 하지만 모든 브라우저가 이러한 최신 기능을 지원하지는 않습니다. 번들러는 이러한 문제를 해결하기 위해 ES6+ 코드를 브라우저에서 실행 가능한 이전 버전의 JavaScript로 트랜스파일링하거나 번역해줍니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"리소스 최적화\"), \": 번들러는 이미지, CSS, 폰트 등의 리소스들을 묶어서 최적화된 형태로 제공할 수 있습니다. 이를 통해 불필요한 리소스 요청을 줄이고 웹 페이지의 성능을 향상시킬 수 있습니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"코드 압축\"), \": 번들러는 개발 환경에서는 가독성을 유지하면서도 배포할 때는 코드를 압축해주는 역할도 수행합니다. 이를 통해 불필요한 공백과 주석을 제거하고 파일 크기를 줄여서 사용자의 다운로드 시간을 최소화합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"webpack 소개 및 핵심 기능\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"webpack\"), \"은 모던 JavaScript 애플리케이션을 위한 \", React.createElement(_components.em, null, \"정적 모듈 번들러\"), \" 입니다. webpack이 애플리케이션을 처리할 때, 내부적으로는 프로젝트에 필요한 모든 모듈을 매핑하고 하나 이상의 \", React.createElement(_components.em, null, \"번들을\"), \" 생성하는 \", React.createElement(_components.a, {\n    href: \"https://webpack.kr/concepts/dependency-graph/\"\n  }, \"디펜던시 그래프\"), \"를 만듭니다\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://webpack.kr/concepts/\"\n  }, \"https://webpack.kr/concepts/\")), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"핵심 기능\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"엔트리 포인트 (Entry Point)\"), \":  webpack이 내부의 디펜던시 그래프 를 생성하기 위해 사용해야 하는 모듈입니다. 이 엔트리 포인트에서부터 웹팩은 모듈 간의 종속성을 탐색하여 지정된 파일에 연관된 모듈과 라이브러리를 포함한 번들을 생성합니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"출력 (Output)\"), \": 생성된 \", React.createElement(_components.em, null, \"번들을\"), \" 내보낼 위치와 이 파일의 이름을 지정하는 방법을 webpack에 알려주는 역할을 합니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"로더 (Loaders)\"), \": 웹팩은 기본적으로 JavaScript와 JSON 파일만 이해하기 때문에 로더를 사용하여 다양한 파일 형식을 처리합니다. 로더는 해당 파일을 모듈로 변환하고 의존성을 해결합니다. 예를 들어, Babel 로더를 사용하여 ES6+ 코드를 ES5로 변환할 수 있습니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"플러그인 (Plugins)\"), \": 플러그인은 모듈 변환 외에 더 다양한 처리를 할 수 있는 도구를 제공한다. 로더는 특정 유형의 모듈을 변환하는 데 사용되지만, 플러그인을 활용하여 번들을 최적화하거나, 애셋을 관리하고, 또 환경 변수 주입등과 같은 광범위한 작업을 수행 할 수 있습니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"모드 (Mode)\"), \": 개발 환경과 프로덕션 환경을 제공하고 내장된 환경별 최적화를 활성화 할 수 있습니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"브라우저 호환성(Browser Compatibility)\"), \": ES5가 호환되는 모든 브라우저를 지원합니다 구형 브라우저를 지원하려면 이러한 표현식을 사용하기 전에 폴리필을 로드해야 합니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"의존성 그래프 (Dependency Graph)\"), \": 웹팩은 모듈 간의 종속성을 분석하여 의존성 그래프를 생성합니다. 이 그래프는 어떤 모듈이 어떤 모듈에 의존하는지를 나타냅니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"번들 생성\"), \": 의존성 그래프를 토대로 웹팩은 필요한 모듈을 번들로 묶습니다. 이 과정에서 코드를 최적화하고 중복된 코드를 제거하여 번들의 크기를 최소화합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"webpack config 옵션 설정을 통해 동작 원리 파악\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://webpack.kr/guides/getting-started/\"\n  }, \"https://webpack.kr/guides/getting-started/\"), \" 의 가이드 라인을 따라 가보면서 파악해 봅니다.\"), \"\\n\", React.createElement(_components.h3), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">webpack-demo\\n  |- package.json\\n  |- package-lock.json\\n |- webpack.config.js\\n  |- /dist\\n    |- index.html\\n  |- /src\\n    |- index.js</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// webpack.config.js</span>\\n\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"path\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">entry</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./src/index.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">output</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">filename</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"main.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">path</span><span class=\\\"token operator\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"dist\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h5, null, \"entry : 지정된 파일에 연관된 모듈과 라이브러리를 포함한 번들을 만든다.\"), \"\\n\", React.createElement(_components.h5, null, \"output : 번들 파일 위치와 이름을 지정한다. 기본값은 \", React.createElement(_components.code, null, \"'./dist/main.js'\"), \"이다. 절대 경로를 사용(\", React.createElement(_components.code, null, \"path.resolve\"), \" 사용)하는 것을 권장한다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token comment\\\">// package.json</span>\\n\\n<span class=\\\"token string-property property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string-property property\\\">\\\"test\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"echo \\\\\\\"Error: no test specified\\\\\\\" &amp;&amp; exit 1\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    <span class=\\\"token string-property property\\\">\\\"bundle\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack --mode=development\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string-property property\\\">\\\"production\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"webpack --mode=production\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"Asset management\"), \"\\n\", React.createElement(_components.p, null, \"webpack은 JS 외에도 로더 또는 내장 에셋 모듈이 지원하는 다른 유형의 파일도 포함하여 번들링 가능합니다. JS에서 CSS를 import하려면 style-loader, css-loader를 설치하고 module설정에 추가해야 합니다\"), \"\\n\", React.createElement(_components.h3, null, \"CSS\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> --save-dev style-loader css-loader</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"webpack.config.js\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"path\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">entry</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./src/index.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">output</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">filename</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"bundle.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">path</span><span class=\\\"token operator\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"dist\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">module</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">rules</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 대소 문자를 구분하지 않고(i) .css로 끝나는($) 파일에 아래 로더를 사용한다</span>\\n        <span class=\\\"token literal-property property\\\">test</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\.css$</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">i</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token literal-property property\\\">use</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"style-loader\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"css-loader\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"모듈 로더는 체인으로 연결할 수 있고 역순으로 실행됩니다. 로드 시간을 단축하기 위해 CSS 압축을 할 수 있고 sass less postcss등 대부분의 css 전처리기 로더가 있습니다.\"), \"\\n\", React.createElement(_components.h3, null, \"Image\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"path\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">entry</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./src/index.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">output</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">filename</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"bundle.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">path</span><span class=\\\"token operator\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"dist\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">module</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">rules</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 대소 문자를 구분하지 않고(i) .css로 끝나는($) 파일에 아래 로더를 사용한다</span>\\n        <span class=\\\"token literal-property property\\\">test</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\.css$</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">i</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token literal-property property\\\">use</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"style-loader\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"css-loader\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token literal-property property\\\">test</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\.(png|svg|jpg|jpeg|gif)$</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">i</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"asset/resource\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"이 외에도 font, xml, csv, toml, yaml, json5등의 에셋을 로드할 수 있습니다\"), \"\\n\", React.createElement(_components.h2, null, \"Plugin\"), \"\\n\", React.createElement(_components.p, null, \"엔트리 포인트의 이름을 변경하거나 새 엔트리 포인트를 추가하면 생성된 번들은 빌드에서 이름이 변경되지만 index.html 파일은 이전 이름을 참조하는 문제가 생깁니다. HtmlWebpackPlugin을 사용하여 문제를 해결해 봅니다.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"path\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> HtmlWebpackPlugin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"html-webpack-plugin\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">entry</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">index</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./src/index.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">print</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./src/js/print.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">plugins</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">HtmlWebpackPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token literal-property property\\\">title</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Output Management\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">output</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">filename</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"[name].bundle.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">path</span><span class=\\\"token operator\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"dist\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">module</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">rules</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 대소 문자를 구분하지 않고(i) .css로 끝나는($) 파일에 아래 로더를 사용한다</span>\\n        <span class=\\\"token literal-property property\\\">test</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\.css$</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">i</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token literal-property property\\\">use</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"style-loader\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"css-loader\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token literal-property property\\\">test</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\.(png|svg|jpg|jpeg|gif)$</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">i</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"asset/resource\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"다시 빌드 해보면 index.html파일이 완전히 새로운 html파일로 생성되었고 모든 번들이 자동으로 추가 되었습니다.\"), \"\\n\", React.createElement(_components.p, null, \"webpack은 dist 폴더에 어떤 파일이 실제로 사용되는지 알지 못합니다 떄문에 빌드를 진행할 수록 /dist 폴더에 많은 번들이 생성되어 상당히 복잡해 집니다. 일반적으로 사용하는 파일만 생성되도록 빌드 전에 /dist 폴더를 정리하는 옵션을 사용하는 것이 좋습니다.\"), \"\\n\", React.createElement(_components.h2, null, React.createElement(_components.strong, null, \"자주 사용하는 플러그인\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, React.createElement(_components.a, {\n    href: \"https://webpack.js.org/plugins/html-webpack-plugin/\"\n  }, \"HtmlWebpackPlugin\"))), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, React.createElement(_components.a, {\n    href: \"https://webpack.js.org/plugins/progress-plugin/#root\"\n  }, \"ProgressPlugin\"))), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, React.createElement(_components.a, {\n    href: \"https://webpack.js.org/plugins/split-chunks-plugin/\"\n  }, \"split-chunks-plugin\"))), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, React.createElement(_components.a, {\n    href: \"https://www.npmjs.com/package/clean-webpack-plugin\"\n  }, \"clean-webpack-plugin\"))), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, React.createElement(_components.a, {\n    href: \"https://github.com/tcoopman/image-webpack-loader\"\n  }, \"image-webpack-loader\"))), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, React.createElement(_components.a, {\n    href: \"https://github.com/webpack-contrib/webpack-bundle-analyzer\"\n  }, \"webpack-bundle-analyzer-plugin\"))), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"HtmlTemplatePlugin\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"MiniCssExtractPlugin\")), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Mode\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"jsx\\\"><pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token operator\\\">**</span><span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"path\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> HtmlWebpackPlugin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"html-webpack-plugin\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\">// 환경 변수와 조합하여 development와 production을 ternary(? : )로 처리하는 방법도 있습니다.</span>\\n\\t<span class=\\\"token literal-property property\\\">mode</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">'development'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">entry</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">index</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./src/index.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">print</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"./src/js/print.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">plugins</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">HtmlWebpackPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token literal-property property\\\">title</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"Output Management\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">output</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">filename</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"[name].bundle.js\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">path</span><span class=\\\"token operator\\\">:</span> path<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>__dirname<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"dist\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">clean</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">module</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token literal-property property\\\">rules</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 대소 문자를 구분하지 않고(i) .css로 끝나는($) 파일에 아래 로더를 사용한다</span>\\n        <span class=\\\"token literal-property property\\\">test</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\.css$</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">i</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token literal-property property\\\">use</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"style-loader\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"css-loader\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token literal-property property\\\">test</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\.(png|svg|jpg|jpeg|gif)$</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">i</span></span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token literal-property property\\\">type</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"asset/resource\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token operator\\\">**</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h4, null, \"development 모드\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"개발용 모드이다.\"), \"\\n\", React.createElement(_components.li, null, \"소스맵을 제공한다.\"), \"\\n\", React.createElement(_components.li, null, \"이전 버전보다 개선된 런타임 에러 메시지를 제공한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"production 모드\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"배포용 모드이다.\"), \"\\n\", React.createElement(_components.li, null, \"코드를 압축(Minify), 난독화(Uglify) 한다.\"), \"\\n\", React.createElement(_components.li, null, \"그 외에도 최적화(Tree Shaking 등)를 통하여 번들 파일 크기를 작게 만든다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"SWC, Vite와의 차이점\"), \"\\n\", React.createElement(_components.h4, null, \"SWC (\", React.createElement(_components.strong, null, \"Super-fast Web Compiler\"), \")\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"SWC는 차세대 빠른 개발자 도구를 위한 확장 가능한 Rust 기반 플랫폼입니다. Next.js, Parcel, Deno와 같은 도구와 Vercel, ByteDance, Tencent, Shopify 등과 같은 회사에서 사용합니다. SWC는 컴파일과 번들링 모두에 사용할 수 있습니다. 컴파일에는 JavaScript가 필요합니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://swc.rs/\"\n  }, \"https://swc.rs/\")), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Vite\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"비트는 자바스크립트 네이티브 모듈을 기반으로 한 데브 서버이자 기존의 프런트엔드 개발 경험을 향상시켜줄 새로운 프런트엔드 툴입니다. Vue 창시자 에반 유가 만들었으며 현재 Vue, React, Svelte 등의 주요 프레임워크 커뮤니티에서 주목하고 있는 도구입니다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://joshua1988.github.io/vue-camp/vite/intro.html#vite%E1%84%85%E1%85%A1%E1%86%AB\"\n  }, \"https://joshua1988.github.io/vue-camp/vite/intro.html#vite란\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Webpack, SWC, 그리고 Vite는 모두 웹 개발을 위한 도구들이지만, 각각의 도구는 목적과 특징이 다릅니다. 아래에서 각 도구의 주요 차이점을 살펴보겠습니다:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Webpack:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"번들링과 더 많은 기능:\"), \" Webpack은 주로 번들링 도구로서 사용됩니다. JS, CSS, 이미지 등 다양한 종류의 파일을 모아서 하나의 번들로 만들어줍니다. 또한 다양한 로더와 플러그인을 사용하여 코드 변환, 최적화, 번들 분석 등 다양한 작업을 수행할 수 있습니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"생태계의 풍부함:\"), \" Webpack은 많은 커뮤니티와 플러그인 생태계를 가지고 있어, 다양한 기능을 확장할 수 있습니다. 대부분의 프로젝트에서 사용될 수 있으며, 복잡한 설정이나 다양한 요구사항을 다룰 수 있습니다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"SWC:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"컴파일러:\"), \" SWC는 TS 및 JS코드를 빠르게 컴파일하는 도구입니다. Babel과 유사한 기능을 가지지만, 더 빠른 속도와 작은 번들 크기를 제공합니다. Rust로 개발되었기 때문에 성능 측면에서 강점을 갖습니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"효율적인 번들링:\"), \" SWC는 자체적으로 번들링을 수행하지는 않습니다. 대신, 빠른 컴파일 속도로 번들링 도구와 연계하여 사용할 수 있습니다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Vite:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"개발 서버와 번들링:\"), \" Vite는 주로 개발 서버와 빌드 도구로 사용됩니다. 개발 서버는 빠른 핫 모듈 리로딩(HMR)을 지원하여 빠른 개발 속도를 제공하며, 실시간으로 변경 사항을 반영합니다. 번들링은 개발 서버에서 이루어지지만, 배포용 번들은 빌드할 때 생성됩니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"ES 모듈 활용:\"), \" Vite는 ES 모듈을 기반으로 작동하며, 개발 서버에서 각 모듈을 별도로 로딩하여 빠른 로딩 속도를 실현합니다.\"), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/hyun95/Learning/my-tech-blog/my-tech-blog/contents/frontend-bundling-webpack/index.mdx\";\nimport React from \"react\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Layout from \"@components/layout/Layout\";\nimport MDXComponents from \"@components/MdxStyleCompoenets\";\nconst PostTemplate = _ref => {\n  var _data$mdx;\n  let {data, location, pageContext, children} = _ref;\n  const {title, date} = (_data$mdx = data.mdx) === null || _data$mdx === void 0 ? void 0 : _data$mdx.frontmatter;\n  return React.createElement(Layout, null, React.createElement(\"small\", null, date), React.createElement(MDXProvider, {\n    components: MDXComponents\n  }, children));\n};\nconst BlogPostPageQuery = \"3237460933\";\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","strong","p","ol","li","hr","h2","h3","code","blockquote","em","a","span","h5","ul","h4","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","PostTemplate","_ref","_data$mdx","data","location","pageContext","children","title","date","mdx","frontmatter","Layout","MDXProvider","MDXComponents","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}