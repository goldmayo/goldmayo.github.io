"use strict";(self.webpackChunkmy_tech_blog=self.webpackChunkmy_tech_blog||[]).push([[934],{5148:function(n,s,a){a.r(s),a.d(s,{default:function(){return u}});var e=a(1151),t=a(7294);function p(n){const s=Object.assign({h1:"h1",strong:"strong",p:"p",ol:"ol",li:"li",hr:"hr",h2:"h2",h3:"h3",code:"code",blockquote:"blockquote",em:"em",a:"a",span:"span",h5:"h5",ul:"ul",h4:"h4"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(s.h1,null,"번들러 ",t.createElement(s.strong,null,"Webpack 설정 옵션"),"을 통해 동작 원리 파악하기, 그리고 ",t.createElement(s.strong,null,"Webpack, SWC, Vite 차이")),"\n",t.createElement(s.p,null,"목차"),"\n",t.createElement(s.ol,null,"\n",t.createElement(s.li,null,"등장배경 : 모듈의 탄생 배경과 문제점에 따른 번들러의 필요성"),"\n",t.createElement(s.li,null,"webpack 소개 및 핵심 기능"),"\n",t.createElement(s.li,null,"config 옵션을 통해 동작원리 파악"),"\n",t.createElement(s.li,null,"SWC, Vite와의 차이점"),"\n"),"\n",t.createElement(s.hr),"\n",t.createElement(s.h2,null,"모듈과 번들러의 등장 배경"),"\n",t.createElement(s.h3,null,"모듈의 필요성"),"\n",t.createElement(s.p,null,"JS로 구현할 수 있는 기능이 많아질수록 늘어나는 코드와 분리한 코드간의 복잡한 의존성을 피할 수 없게 되었습니다."),"\n",t.createElement(s.p,null,"단순히 여러 파일로 나누면 모듈화가 된 것이 아닙니다. JS는 모두 전역 스코프를 사용하고 이는 다른 파일에 영향을 줄 수 있습니다. 게다가 의존성에 맞게 알맞은 순서로 로드되어야 하기에 의존성을 확인하기 번거롭습니다. ESM, CommonJS AMD가 있습니다."),"\n",t.createElement(s.p,null,"ESM 기준으로 export import 그리고 ",t.createElement(s.code,null,'<script type="module" src="./module-a.js">')," 를 사용하여 전역 스코프 대신 독립된 모듈 스코프를 사용하여 모듈간의 의존성을 명확하게 하고 전역 스코프가 여러 변수로 오염되는 것을 막을 수 있습니다."),"\n",t.createElement(s.h3,null,"번들러의 필요성"),"\n",t.createElement(s.blockquote,null,"\n",t.createElement(s.p,null,"bundle : 묶음, 합본"),"\n"),"\n",t.createElement(s.p,null,"번들러는 의존성이 있는 모듈들을 하나의 JS파일로 번들링하는 모듈 번들러입니다 모듈 시스템을 사용하면서 발생하는 문제를 해결하기 위해 필요합니다."),"\n",t.createElement(s.ol,null,"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"네트워크 요청 최소화"),": 모듈 시스템은 코드를 여러 개의 작은 모듈로 나누는 것을 지원합니다. 하지만 웹에서는 많은 개별 모듈을 로딩하는 데에 네트워크 요청이 필요합니다. 이로 인해 여러 개의 모듈을 로딩하는 데 시간이 많이 소요되며, 웹 페이지의 초기 로딩 속도가 저하될 수 있습니다. 번들러는 이러한 문제를 해결하기 위해 여러 모듈을 하나의 번들로 묶어서 클라이언트 측에서 하나의 요청으로 가져올 수 있게 해줍니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"종속성 관리와 충돌 방지"),": 프로젝트에서 사용하는 다양한 라이브러리와 모듈들 간에는 종속성 관계가 있을 수 있습니다. 이러한 종속성 관계를 관리하면서 충돌을 방지하고 최신 버전의 라이브러리를 사용하려면 번들러가 필요합니다. 번들러는 모듈 간의 종속성을 분석하고 필요한 모듈들을 올바른 순서로 포함시켜줍니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"트랜스파일링과 번역"),": 모듈 시스템을 사용하면 ES6+의 최신 JavaScript 기능을 활용할 수 있습니다. 하지만 모든 브라우저가 이러한 최신 기능을 지원하지는 않습니다. 번들러는 이러한 문제를 해결하기 위해 ES6+ 코드를 브라우저에서 실행 가능한 이전 버전의 JavaScript로 트랜스파일링하거나 번역해줍니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"리소스 최적화"),": 번들러는 이미지, CSS, 폰트 등의 리소스들을 묶어서 최적화된 형태로 제공할 수 있습니다. 이를 통해 불필요한 리소스 요청을 줄이고 웹 페이지의 성능을 향상시킬 수 있습니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"코드 압축"),": 번들러는 개발 환경에서는 가독성을 유지하면서도 배포할 때는 코드를 압축해주는 역할도 수행합니다. 이를 통해 불필요한 공백과 주석을 제거하고 파일 크기를 줄여서 사용자의 다운로드 시간을 최소화합니다."),"\n"),"\n",t.createElement(s.h2,null,"webpack 소개 및 핵심 기능"),"\n",t.createElement(s.blockquote,null,"\n",t.createElement(s.p,null,t.createElement(s.strong,null,"webpack"),"은 모던 JavaScript 애플리케이션을 위한 ",t.createElement(s.em,null,"정적 모듈 번들러")," 입니다. webpack이 애플리케이션을 처리할 때, 내부적으로는 프로젝트에 필요한 모든 모듈을 매핑하고 하나 이상의 ",t.createElement(s.em,null,"번들을")," 생성하는 ",t.createElement(s.a,{href:"https://webpack.kr/concepts/dependency-graph/"},"디펜던시 그래프"),"를 만듭니다"),"\n",t.createElement(s.p,null,t.createElement(s.a,{href:"https://webpack.kr/concepts/"},"https://webpack.kr/concepts/")),"\n"),"\n",t.createElement(s.h3,null,"핵심 기능"),"\n",t.createElement(s.ol,null,"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"엔트리 포인트 (Entry Point)"),":  webpack이 내부의 디펜던시 그래프 를 생성하기 위해 사용해야 하는 모듈입니다. 이 엔트리 포인트에서부터 웹팩은 모듈 간의 종속성을 탐색하여 지정된 파일에 연관된 모듈과 라이브러리를 포함한 번들을 생성합니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"출력 (Output)"),": 생성된 ",t.createElement(s.em,null,"번들을")," 내보낼 위치와 이 파일의 이름을 지정하는 방법을 webpack에 알려주는 역할을 합니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"로더 (Loaders)"),": 웹팩은 기본적으로 JavaScript와 JSON 파일만 이해하기 때문에 로더를 사용하여 다양한 파일 형식을 처리합니다. 로더는 해당 파일을 모듈로 변환하고 의존성을 해결합니다. 예를 들어, Babel 로더를 사용하여 ES6+ 코드를 ES5로 변환할 수 있습니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"플러그인 (Plugins)"),": 플러그인은 모듈 변환 외에 더 다양한 처리를 할 수 있는 도구를 제공한다. 로더는 특정 유형의 모듈을 변환하는 데 사용되지만, 플러그인을 활용하여 번들을 최적화하거나, 애셋을 관리하고, 또 환경 변수 주입등과 같은 광범위한 작업을 수행 할 수 있습니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"모드 (Mode)"),": 개발 환경과 프로덕션 환경을 제공하고 내장된 환경별 최적화를 활성화 할 수 있습니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"브라우저 호환성(Browser Compatibility)"),": ES5가 호환되는 모든 브라우저를 지원합니다 구형 브라우저를 지원하려면 이러한 표현식을 사용하기 전에 폴리필을 로드해야 합니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"의존성 그래프 (Dependency Graph)"),": 웹팩은 모듈 간의 종속성을 분석하여 의존성 그래프를 생성합니다. 이 그래프는 어떤 모듈이 어떤 모듈에 의존하는지를 나타냅니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"번들 생성"),": 의존성 그래프를 토대로 웹팩은 필요한 모듈을 번들로 묶습니다. 이 과정에서 코드를 최적화하고 중복된 코드를 제거하여 번들의 크기를 최소화합니다."),"\n"),"\n",t.createElement(s.h2,null,"webpack config 옵션 설정을 통해 동작 원리 파악"),"\n",t.createElement(s.p,null,t.createElement(s.a,{href:"https://webpack.kr/guides/getting-started/"},"https://webpack.kr/guides/getting-started/")," 의 가이드 라인을 따라 가보면서 파악해 봅니다."),"\n",t.createElement(s.h3),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">webpack-demo\n  |- package.json\n  |- package-lock.json\n |- webpack.config.js\n  |- /dist\n    |- index.html\n  |- /src\n    |- index.js</code></pre></div>'}}),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// webpack.config.js</span>\n\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.h5,null,"entry : 지정된 파일에 연관된 모듈과 라이브러리를 포함한 번들을 만든다."),"\n",t.createElement(s.h5,null,"output : 번들 파일 위치와 이름을 지정한다. 기본값은 ",t.createElement(s.code,null,"'./dist/main.js'"),"이다. 절대 경로를 사용(",t.createElement(s.code,null,"path.resolve")," 사용)하는 것을 권장한다."),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// package.json</span>\n\n<span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \\"Error: no test specified\\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>\n\n    <span class="token string-property property">"bundle"</span><span class="token operator">:</span> <span class="token string">"webpack --mode=development"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"production"</span><span class="token operator">:</span> <span class="token string">"webpack --mode=production"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>'}}),"\n",t.createElement(s.h2,null,"Asset management"),"\n",t.createElement(s.p,null,"webpack은 JS 외에도 로더 또는 내장 에셋 모듈이 지원하는 다른 유형의 파일도 포함하여 번들링 가능합니다. JS에서 CSS를 import하려면 style-loader, css-loader를 설치하고 module설정에 추가해야 합니다"),"\n",t.createElement(s.h3,null,"CSS"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader</code></pre></div>'}}),"\n",t.createElement(s.p,null,"webpack.config.js"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 대소 문자를 구분하지 않고(i) .css로 끝나는($) 파일에 아래 로더를 사용한다</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"모듈 로더는 체인으로 연결할 수 있고 역순으로 실행됩니다. 로드 시간을 단축하기 위해 CSS 압축을 할 수 있고 sass less postcss등 대부분의 css 전처리기 로더가 있습니다."),"\n",t.createElement(s.h3,null,"Image"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 대소 문자를 구분하지 않고(i) .css로 끝나는($) 파일에 아래 로더를 사용한다</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|svg|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"이 외에도 font, xml, csv, toml, yaml, json5등의 에셋을 로드할 수 있습니다"),"\n",t.createElement(s.h2,null,"Plugin"),"\n",t.createElement(s.p,null,"엔트리 포인트의 이름을 변경하거나 새 엔트리 포인트를 추가하면 생성된 번들은 빌드에서 이름이 변경되지만 index.html 파일은 이전 이름을 참조하는 문제가 생깁니다. HtmlWebpackPlugin을 사용하여 문제를 해결해 봅니다."),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">print</span><span class="token operator">:</span> <span class="token string">"./src/js/print.js"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Output Management"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"[name].bundle.js"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 대소 문자를 구분하지 않고(i) .css로 끝나는($) 파일에 아래 로더를 사용한다</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|svg|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(s.p,null,"다시 빌드 해보면 index.html파일이 완전히 새로운 html파일로 생성되었고 모든 번들이 자동으로 추가 되었습니다."),"\n",t.createElement(s.p,null,"webpack은 dist 폴더에 어떤 파일이 실제로 사용되는지 알지 못합니다 떄문에 빌드를 진행할 수록 /dist 폴더에 많은 번들이 생성되어 상당히 복잡해 집니다. 일반적으로 사용하는 파일만 생성되도록 빌드 전에 /dist 폴더를 정리하는 옵션을 사용하는 것이 좋습니다."),"\n",t.createElement(s.h2,null,t.createElement(s.strong,null,"자주 사용하는 플러그인")),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,t.createElement(s.strong,null,t.createElement(s.a,{href:"https://webpack.js.org/plugins/html-webpack-plugin/"},"HtmlWebpackPlugin"))),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,t.createElement(s.a,{href:"https://webpack.js.org/plugins/progress-plugin/#root"},"ProgressPlugin"))),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,t.createElement(s.a,{href:"https://webpack.js.org/plugins/split-chunks-plugin/"},"split-chunks-plugin"))),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,t.createElement(s.a,{href:"https://www.npmjs.com/package/clean-webpack-plugin"},"clean-webpack-plugin"))),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,t.createElement(s.a,{href:"https://github.com/tcoopman/image-webpack-loader"},"image-webpack-loader"))),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,t.createElement(s.a,{href:"https://github.com/webpack-contrib/webpack-bundle-analyzer"},"webpack-bundle-analyzer-plugin"))),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"HtmlTemplatePlugin")),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"MiniCssExtractPlugin")),"\n"),"\n",t.createElement(s.h2,null,"Mode"),"\n",t.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token operator">**</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 환경 변수와 조합하여 development와 production을 ternary(? : )로 처리하는 방법도 있습니다.</span>\n\t<span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">print</span><span class="token operator">:</span> <span class="token string">"./src/js/print.js"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Output Management"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"[name].bundle.js"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 대소 문자를 구분하지 않고(i) .css로 끝나는($) 파일에 아래 로더를 사용한다</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|svg|jpg|jpeg|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">**</span></code></pre></div>'}}),"\n",t.createElement(s.h4,null,"development 모드"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"개발용 모드이다."),"\n",t.createElement(s.li,null,"소스맵을 제공한다."),"\n",t.createElement(s.li,null,"이전 버전보다 개선된 런타임 에러 메시지를 제공한다."),"\n"),"\n",t.createElement(s.h4,null,"production 모드"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,"배포용 모드이다."),"\n",t.createElement(s.li,null,"코드를 압축(Minify), 난독화(Uglify) 한다."),"\n",t.createElement(s.li,null,"그 외에도 최적화(Tree Shaking 등)를 통하여 번들 파일 크기를 작게 만든다."),"\n"),"\n",t.createElement(s.h2,null,"SWC, Vite와의 차이점"),"\n",t.createElement(s.h4,null,"SWC (",t.createElement(s.strong,null,"Super-fast Web Compiler"),")"),"\n",t.createElement(s.blockquote,null,"\n",t.createElement(s.p,null,"SWC는 차세대 빠른 개발자 도구를 위한 확장 가능한 Rust 기반 플랫폼입니다. Next.js, Parcel, Deno와 같은 도구와 Vercel, ByteDance, Tencent, Shopify 등과 같은 회사에서 사용합니다. SWC는 컴파일과 번들링 모두에 사용할 수 있습니다. 컴파일에는 JavaScript가 필요합니다."),"\n",t.createElement(s.p,null,t.createElement(s.a,{href:"https://swc.rs/"},"https://swc.rs/")),"\n"),"\n",t.createElement(s.h4,null,"Vite"),"\n",t.createElement(s.blockquote,null,"\n",t.createElement(s.p,null,"비트는 자바스크립트 네이티브 모듈을 기반으로 한 데브 서버이자 기존의 프런트엔드 개발 경험을 향상시켜줄 새로운 프런트엔드 툴입니다. Vue 창시자 에반 유가 만들었으며 현재 Vue, React, Svelte 등의 주요 프레임워크 커뮤니티에서 주목하고 있는 도구입니다."),"\n",t.createElement(s.p,null,t.createElement(s.a,{href:"https://joshua1988.github.io/vue-camp/vite/intro.html#vite%E1%84%85%E1%85%A1%E1%86%AB"},"https://joshua1988.github.io/vue-camp/vite/intro.html#vite란")),"\n"),"\n",t.createElement(s.p,null,"Webpack, SWC, 그리고 Vite는 모두 웹 개발을 위한 도구들이지만, 각각의 도구는 목적과 특징이 다릅니다. 아래에서 각 도구의 주요 차이점을 살펴보겠습니다:"),"\n",t.createElement(s.ol,null,"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"Webpack:"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"번들링과 더 많은 기능:")," Webpack은 주로 번들링 도구로서 사용됩니다. JS, CSS, 이미지 등 다양한 종류의 파일을 모아서 하나의 번들로 만들어줍니다. 또한 다양한 로더와 플러그인을 사용하여 코드 변환, 최적화, 번들 분석 등 다양한 작업을 수행할 수 있습니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"생태계의 풍부함:")," Webpack은 많은 커뮤니티와 플러그인 생태계를 가지고 있어, 다양한 기능을 확장할 수 있습니다. 대부분의 프로젝트에서 사용될 수 있으며, 복잡한 설정이나 다양한 요구사항을 다룰 수 있습니다."),"\n"),"\n"),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"SWC:"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"컴파일러:")," SWC는 TS 및 JS코드를 빠르게 컴파일하는 도구입니다. Babel과 유사한 기능을 가지지만, 더 빠른 속도와 작은 번들 크기를 제공합니다. Rust로 개발되었기 때문에 성능 측면에서 강점을 갖습니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"효율적인 번들링:")," SWC는 자체적으로 번들링을 수행하지는 않습니다. 대신, 빠른 컴파일 속도로 번들링 도구와 연계하여 사용할 수 있습니다."),"\n"),"\n"),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"Vite:"),"\n",t.createElement(s.ul,null,"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"개발 서버와 번들링:")," Vite는 주로 개발 서버와 빌드 도구로 사용됩니다. 개발 서버는 빠른 핫 모듈 리로딩(HMR)을 지원하여 빠른 개발 속도를 제공하며, 실시간으로 변경 사항을 반영합니다. 번들링은 개발 서버에서 이루어지지만, 배포용 번들은 빌드할 때 생성됩니다."),"\n",t.createElement(s.li,null,t.createElement(s.strong,null,"ES 모듈 활용:")," Vite는 ES 모듈을 기반으로 작동하며, 개발 서버에서 각 모듈을 별도로 로딩하여 빠른 로딩 속도를 실현합니다."),"\n"),"\n"),"\n"))}var l=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,e.ah)(),n.components);return s?t.createElement(s,n,t.createElement(p,n)):p(n)},o=a(9544),c=a(3911);const r=n=>{var s;let{data:a,location:p,pageContext:l,children:r}=n;const{title:u,date:i}=null===(s=a.mdx)||void 0===s?void 0:s.frontmatter;return t.createElement(o.Z,null,t.createElement("small",null,i),t.createElement(e.Zo,{components:c.Z},r))};function u(n){return t.createElement(r,n,t.createElement(l,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-tsx-content-file-path-contents-frontend-bundling-webpack-index-mdx-d7e3cd1efc5f564a5d37.js.map